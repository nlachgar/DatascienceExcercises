#Data Science Excercises: Phase 1
#Nabil Lachgar

#Chapter 3
  ### *3.2.4*
    #1. ggplot(data = mpg) yields blank plot 
    #2. nrow(mpg) = 234 rows, ncol(mpg) = 11 columns
    #3. from ?mpg: drv: f = front-wheel drive, r = rear wheel drive, 4 = 4wd
    #4. ggplot(data = mpg) + geom_point(mapping = aes(x = hwy, y = cyl))
    #5. ggplot(data = mpg) + geom_point(mapping = aes(x = class, y = drv)) 
        *Class & drive are both discrete factors so the scatterplot shows multiple observations over each other.
        *Of the 234 observations in our set, we only see 12 points in the plot

  ### *3.3.1*
    #1. Color is defined in ase(), when it should be defined outside
    #2. ?mpg for(i in 1:ncol(mpg)){print(class(mpg[[i]]))}
      categorical: manufacturer, model, displ, trans, fl, class
      continuous - displ, year, cyl, cty, hwy
      running mpg shows <chr>, <dbl> definitions in each column
    #3. map color/size to cty/hwy (continuous)
      ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y =model, color = cty, size = hwy))
      This shows an error when trying to map size to a continuous variable
      ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y =model, shape = cty))
      Map Size/Color to discrete variables
      ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y =model, color = manufacturer, size = class))

      *Color - Discrete (different colors), continuous (same color gradients)
      *Size - Discrete (different sizes, but may not make sense), continuous (scaled in size)
      *Shape - Discrete (different shapes), continuous (unable to do this, throws error)

    #4. You are able to map the same variable to multiple aes
      *ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y =model, color = cty, size = cty))

    #5  The stroke increases line width
      *ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y =model, shape = fl, stroke = cty*0.05))

    #6  This creates 2 different colors based on a T/F value
      *ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y =model, color = displ < 5))

### *3.5.1*
  #1 - creates several different faces but function runs
    * A larger sample set would make the graph impossible to interpret since we'd have too many facets
    * ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ cty, nrow = 2)
  #2 
    *The empty facets makes it so that there will be no point in the data matching both drv & cyl
    *The empty facets line up with the overlaps of drv & cyl in the example plot without scatter points
  #3 
    #disp vs hwy, broken out by 3 rows of the drv variable
     *ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ .)
    #disp vs hwy broken into 4 columns of the cyl variable
     *ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ cyl)
    #The "." allows us to grid facets off of 1 variable only for a column/row
  #4 - ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(~ class, nrow = 2)
     *Facets let us see trends in individual data sets, broken out by class
     *Facets make it difficult to compare between any 2 classes - colors would add value here
     *As the data set grows, facets allow us to delineate data to compare different colors of classes on the same graph
  #5 - nrow() returns number of rows, ncol() returns number of columns
     *You can also use as.table, switch, or dir to change the pane layout
     *facet_grid() will already have a number of rows/columns based on the number of observations of each variable
  #6 - Produces a representation with more columns than rows


### *3.6.1*

  #1 - geom_line, geom_boxplot, geom_histogram, geom_area
  #2 - *ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth(se = FALSE, show.legend = FALSE)
  #3 - show.legend = false removes the legend from graph - default is to show legend
  #4 - se = FALSE removes confidence interval
  #5 - The plots will be identical  
  #6 -
    *ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth( se = FALSE)
    *ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth( se = FALSE, aes(group = drv))
    *ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + geom_point() + geom_smooth( se = FALSE)
    *ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(aes(color = drv)) + geom_smooth( se = FALSE)
    *ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point(aes(color = drv)) + geom_smooth( se = FALSE, aes(linetype = drv))
    *ggplot(data = mpg) + geom_point(aes(x = displ, y = hwy, fill = drv), size = 5,  color = "white") + geom_point(aes(x = displ, y = hwy, fill = drv, color=  drv), size = 3)

### *3.7.1*
   #1 - default geom - "pointrange"
     *tmp <- diamonds %>% group_by(cut) %>% summarise( medval = median(depth), min = min(depth), max = max(depth))
     *ggplot( data = tmp, mapping = aes(x = cut, y = medval, ymin = min, ymax = max)) + geom_pointrange()

  #2 - ?geom_col
     *Geom col defaults to using actual data values
     *Geom bar uses stat_count by default, geom_col uses stat_identity

  #3
    *?geom_point - identity
    *?geom_bar - stat_count
    *?geom_column - stat_identity
    *?geom_area - stat_identity
    *?geom_histogram - stat_bin
    *?geom_path - stat_identity 
    *?geom_line - stat_identity
    *?geom_boxplot - stat_boxplot

  #4
    *?stat_smooth - shows smoothed trend in data (helpful for visually interpreting data)
    *takes standard mapping & data, method for the way smoothing is done (rlm)
    *formula - what relation is determined (~x,y)
    *se - confidence intervals, n - number of points, level - level of confidence, fullrange - fit whole plot or just data

  #5 - without group = 1 each x aes is mapped proportionally to itself - so each x cut shows up as a 100% proportion

### *3.8.1* 

#1 - Overplotting can be fixed with jitter
   *ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point() + geom_jitter()
#2 - ?geom_jitter
   *Standard mapping, data, stat, na.rm, show.legend args for all geoms
    *width/height adjusts the size of the jitter
    *position to well, adjust position
#3 - Geom_count can be used to deal with over-fitting
    *instead of jittering overplotted points it grows them to show that more exist
#4 - ?geom_boxplot
    *Default is dodge
    *ggplot(data = mpg) + geom_boxplot(mapping = aes(x = drv, y = cty, fill = class), position = "dodge")

### *3.9.1*
#1 - Stacked Bar Chart to polar:
    *ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar() + coord_polar()
#2 - labs() provides axes and title lables for plots
    *?labs
#3
*?coord_map
*?coord_quickmap
*Both plot maps in 2D - coord_quickmap preserves straight lines - quickmap is bettercloser to the equator since the computation is faster
*coordmap requires more computation 

#4 - ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point() + geom_abline() + coord_fixed()
  *?geom_abline # provideds reference lines to the plot - can also specify slope/intercept
  *?coord_fixed # forces scale on the x vs y axis (default is 1 to 1) - Scale doesn't skew the view because it puts relative slope of relation in perspective

# Chapter 4

### *4.4*
  #1 - The "i" in the 2nd my_variable isn't a real i
  #2 
    *ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy))
    *filter(mpg, cyl == 8)
    *filter(diamonds, carat > 3)
  #3 - Shows shortcut commands: Menu -> Tools -> Keyboard Shortcuts Help


# Chapter 5 

### *5.2.4*
  #1
    *library(nycflights13)
    *filter(flights, arr_delay >= 120)
    *filter(flights, dest == 'IAH' | dest == 'HOU')
    *filter(flights, carrier %in% c('UA', 'AA', 'DL'))
    *filter(flights, month %in% c(7,8,9))
    *filter(flights, arr_delay >= 120 & dep_delay <= 0)
    *filter(flights, dep_delay >= 60 & dep_delay - arr_delay >= 30)
    *filter(flights, dep_time >= 0 & dep_time <=600)
 #2 - limits observation between 2 values
    *filter(flights, between(month, 7, 9))
    *filter(flights, between(dep_time,0,600))
 #3 
    *filter(flights, is.na(dep_time))
    *No arrival time & no air time - flights cancelled/never took off
 #4
    *NA ^ 0 - anything raised to the 0 is 1, so regardless of the NA value, it would yield 1
    *NA | TRUE - Regardless of what NA is, the "|" will always return "true"
    *NA | FALSE - Returns NA
    *NA & FALSE - Even if NA were to be true, false will override the "&"
    *NA & TRUE #Returns NA
    *If changing NA value alters operations outcome, we would see NA 
    *If a change to NA doesn't change the output, then the function will be able to return another value
    
    
###*5.3.1*

  #1 - arrange(flights, desc(is.na(dep_time)))

  #2 - Most delayed flights
    *arrange(flights, desc(dep_delay))
    *Flights that left earliest (earliest time of day)
    *arrange(flights, dep_time)

  #3 - arrange(flights, distance)
  #4
    *arrange(flights, desc(air_time))
    *arrange(flights, air_time)

###*5.4.1*

  #1
    *select(flights, dep_time, dep_delay, arr_time, arr_delay)
    *select(flights, starts_with('dep'), starts_with('arr'))
    *select(flights, contains('dep'), contains('arr'), -contains('sched')
    *Use matches() with a regex function
  #2
    *select(flights, dep_time, dep_time) - variable is selectedo once
  #3
    *vars <- c("year", "month", "day", "dep_delay", "arr_delay")
    *select(flights, one_of(vars))
    *Lets you select columns with names matching values in character vector - helpful with pre-defining vars

  #4
    *select(flights, contains("time", ignore.case = FALSE))
    *Does not default to case sensitive - use ignore.case

###*5.5.2*
  #1
    *select(mutate(flights, (sched_dep_minutes_since_midnight) = (sched_dep_time %/% 100)*60 + sched_dep_time %% 100, dep_minutes_since_midnight = (dep_time %/% 100)*60 + dep_time %% 100), sched_dep_time, dep_time, sched_dep_minutes_since_midnight, dep_minutes_since_midnight)

  #2
    *(flights %>% mutate(arr_dep_diff = arr_time - dep_time, arr_dep_minute_diff = (arr_dep_diff %/% 100)*60 + arr_dep_diff %% 100) %>%) 
    *select(air_time, arr_time, dep_time, arr_dep_diff, arr_dep_minute_diff)
    *air_time would be the difference between arr_time and dep_time - simple subrtraction doesn't provide result
    *need to take the difference & convert to total minutes
    *numbers are different because we likely aren't adjusting for time zones, while the air_time function is
  #3 
    *flights%>%  select(dep_time, sched_dep_time, dep_delay)
    *dep_Delay shows difference between the other 2 vars
  #4 
    *flights %>% mutate( delayRank = min_rank(desc(dep_delay))) %>% select(dep_delay, delayRank) %>% arrange(delayRank)
    *use dense_rank to keep ties - min_rank will assign an ordering to ties
  #5 
    *1:3 + 1:10 
    *Returns error: You can't add vectors with different lenghts (3 vs 10)
  #6 
    *?Trig
    *cos(x), sin(x), tan(x), acos(x), asin(x), atan(x), atan2(y, x), cospi(x), sinpi(x), tanpi(x)
    

###*5.6.7*

  #1
    a - Scatterplot to look at the variance of delays for each specific flight compared to teh avg delay time-
      *will help determine if it's a few fligths consistently delayed or sporadically a lot of flights
    b - Bucket counts late flights in 10 minute intervals - Let's us determine whether we have many flights late by a few minutes or a few very late flights
    c - Look at the percent early vs percent late - bucket by percent and look at counts
    d - Plot average delays against time of day to see if some times have worse delays
    e - Plot variance in delays against time of day to see if high-delay times area  result of fewer extremely delayed flights or a slight delay in a greater number of flights
      *Departure delay is more important

  #2 
    *not_cancelled %>% count(dest)
    *not_cancelled %>% group_by(dest) %>% summarise(n())
    *not_cancelled %>% count(tailnum, wt = distance)
    *not_cancelled %>% group_by(tailnum) %>% summarise(wt = sum(distance))

  #3
    *Definition only looks for no NA value in the delay columns
    *Should look at the dep_time & arr_time as a hard rule for if the flight departed & landed

  #4 - flights %>% group_by(year, month, day) %>% summarise(cancelled = sum(is.na(dep_time)), avgDelay = mean(dep_delay, na.rm = TRUE)) %>% 
      *ggplot(aes(x = avgDelay, y = cancelled)) + geom_point() + geom_smooth()
      *Correlation between the avg delay and number of flights cancelled
      *Not strong but exists
      *Likely mostly corrolated to weather patterns in NY

  #5 - identify a visual trend in the data
    *flights %>% group_by(carrier, dest) %>% summarise(total = n(), meanDel = mean(dep_delay, na.rm = TRUE)) %>% 
    *filter(total > 1000) %>% 
    *ggplot(aes(x = dest, y = meanDel, group = carrier, fill = carrier)) + geom_bar(stat = "identity", position = "dodge") + coord_flip()
    *From the graph, across multiple airports it looks to be EV

  #6 - tmp <- flights %>% count(dest, sort(origin))
    *Provides sorted ordering for another var and breaks out by that variable
    *Good for organizing/summarizing data

###*5.7.1*
  #1 - summarise() - summarises functions based on groups rather than the overall data set
     *mutate() - preforms function of new column relative to each rows group
     *filter() - limits each data set within its own group

  #2 - flights %>% group_by(tailnum) %>% 
     *summarise(avgArrDelay = mean(arr_delay, na.rm = TRUE)) %>% 
     *filter(rank(desc(avgArrDelay)) == 1)
     *Worst average arrival delay is "N844MH"

  #3
    *flights %>% mutate(the_hour = sched_dep_time %/% 100) %>% 
    *group_by(the_hour) %>% 
    *summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>% 
    *arrange(rank((avg_delay))) %>% 
    *ggplot(aes(x = the_hour, y = avg_delay)) + geom_bar(stat = "identity")
    *Flights from 5am - 6am are least delayed

  #4 - Total delay for each destination
    *flights %>%
    *group_by(dest) %>% summarise(total_delays = sum(dep_delay, na.rm = TRUE))

  #5
    *flights %>% arrange(year, month, day, sched_dep_time) %>% 
    *na.omit() %>% 
    *mutate(dep_delay_flight_before = lag(dep_delay)) %>% 
    *select(year:day, sched_dep_time, dep_delay, dep_delay_flight_before)
    *ggplot(aes(x = dep_delay_flight_before, y = dep_delay)) + geom_point(alpha = 0.4)
  
  #6 - flights with most distance vs airtime
      *flights %>% group_by(dest) %>% 
      *mutate(est_speed = distance/air_time) %>% 
      *select(dest, air_time, distance, est_speed, tailnum) %>% 
      *filter(rank(desc(est_speed)) < 3) %>% 
      *arrange(desc(est_speed))
      *Flight N666DN takes 65 min from NY to Atlanta  
  
      *flights %>% group_by(dest) %>% 
      *mutate(time_rel_shortest_flight = air_time/min(air_time, na.rm = TRUE)) %>% 
      *select(year:day, air_time, time_rel_shortest_flight, tailnum) %>% 
      *arrange(desc(time_rel_shortest_flight))
      *Most delayed in the air: tailnum N37255 to BOS on 6/24
      
  #7 - All destinations with >1 carrier
      *flights %>% group_by(dest) %>% summarise(total_carriers = n_distinct(carrier)) %>% 
      *filter(total_carriers > 1)

      - Rank carriers on # of destinations
      *flights %>% group_by(carrier) %>% summarise(destinations = n_distinct(dest)) %>% 
      *arrange(rank(desc(destinations)))
  #8 
      *flights %>% group_by(tailnum) %>% 
      *filter(air_time > 60 & dep_delay <= 0) %>% 
      *count()

#Chapter 6

  ###*6.3*
    #1 - Running SQL in RStudio Notebook
    * install.packages("RPostgreSQL")
    * library(RPostgreSQL)
    * con <- dbConnect(PostgreSQL(), host = "redventures.com", dbname = "EnergySavings", user = "nlachgar")

This didn't really work.

Instead practiced using Option + CTRL + O to collapse all sections and Shift+Option+CTRL+O to expand
Pretty nifty

  #2 - Common Diagnostic Errors
    *Warn if variable used has no definition in scope
    *Warn if variable is defined but not used
    *Checks to see if code conforms to Hadley Wickham's style guide
    *reported in the left gutter and underlined


#Chapter 7

 ###*7.3.4* 
  #1 
    *ggplot(diamonds, aes(x = x)) + geom_histogram(binwidth = 0.5) + coord_cartesian(ylim = c(0, 50))
     - most x values lie between 3 and 10, few outliers
    *ggplot(diamonds, aes(x = y)) + geom_histogram(binwidth = 0.5) + coord_cartesian(ylim = c(0, 50))
     - most y values between 5 and 11, less than 10 outliers at 0, 30, 60
    *ggplot(diamonds, aes(x = z)) + geom_histogram(binwidth = 0.5) + coord_cartesian(ylim = c(0, 50))
     - z values range from 3 to 6, outlier at 30 and a few at 0
  #2
    *ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 10) 
      - most diamonds are priced between $500 - $1500
      - No diamonds priced between $1460 and $1540
  #3 - diamonds %>% filter(carat == .99) %>% count()
      *23 diaomonds of .99 carat
      *diamonds %>% filter(carat == 1) %>% count()
      *1588 diamonds of 1 carat - Rounding?
  #4 - ggplot(diamonds, aes(x = price)) + geom_histogram() + coord_cartesian(xlim = c(0,5000))
      *coord_cartesian just zooms the plot and doesn't change the data
      *bin sizes are chosen by default by ggplot 
      *bin size = 700 on price, 0.15 on carat 
  
      *ggplot(diamonds, aes(x = price)) + geom_histogram() + xlim(0,4000)
      *using xlim or ylim removes values outside the limit
      *xlim resets bin size

  ###*7.4.1*
    #1
      ggplot(diamonds, aes(x = cut)) + geom_bar()
      ggplot(diamonds %>% mutate(cut1 = ifelse(cut == 'Good', NA, cut)), aes(x = cut1)) + geom_bar()
      ggplot(diamonds, aes(x = carat)) + geom_histogram()
      ggplot(diamonds %>% mutate(carat1 = ifelse(carat < .5, NA, carat)), aes(x = carat1)) + geom_histogram()
  
    *missing values in histogram can't be plotted continuous so they won't show
    *A bar chart won't plot count values
 
    #2 
     *na.rm = TRUE ignores NA values when calculating sums
     *a sum can't be calculated with NA values

###*7.5.1.1*
  #1 nycflights13::flights %>% 
  *mutate(cancelled = is.na(dep_time) , sched_hour = sched_dep_time %/% 100 , sched_min = sched_dep_time %% 100 , sched_dep_time = sched_hour + sched_min / 60) %>% 
  *ggplot(mapping = aes(x = sched_dep_time, y = ..density..)) + geom_freqpoly(mapping = aes(colour = cancelled), binwidth = 1)

  #2 - ggplot(diamonds, aes(x=price, y = ..density..)) + geom_freqpoly(mapping = aes(color = color), binwidth = 2000)
      *See which variables skew high by changing colors
      
      *Size vs. Carat
      - ggplot(diamonds %>% mutate(size = x*y*z), aes(x = size, y = ..density..)) + geom_freqpoly(aes(color = cut), binwidth = 20) + coord_cartesian(xlim = c(0,500))
      - ggplot(diamonds, aes(x = carat, y = ..density..)) + geom_freqpoly(aes(color = cut), binwidth = .1) + coord_cartesian(xlim = c(0,4))
      *Higher carat diamonds are smaller
  
  #3
    *ggplot(diamonds, aes(x = cut, y = price)) + geom_boxplot() + coord_flip()
    *ggplot(diamonds, aes(x = price, y = cut)) + ggstance::stat_boxploth()
    - ggstance requires you to reorder x and y variables from using coord_flip  

  #4 - ggplot(diamonds, aes(x = cut, y = price)) + geom_lv()
    *?geom_lv
    #This is more holistic and shows more outliers as points
  #5 - ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 1000) + facet_grid(cut~.)
      *ggplot(diamonds, aes(x = price)) + geom_freqpoly(aes(color = cut), binwidth = 1000)
      *ggplot(diamonds, aes(x = cut, y = price)) + geom_violin()
 
      *Facted - Easy to view inidividual data sets but difficult to compare trends
      *frequpoly - helpful for comparing data overlay but can get busy with multiple breakouts
      *Violin - works well for density comparisons but doesn't show raw counts - isolates factors
  #6
    *reduces overplotting through randomization
    *ggplot(mpg, aes(x = cyl, y = displ )) + geom_point() + geom_beeswarm()

    ?ggbeeswarm::geom_quasirandom
    *Shifts points by quasirandomly
    *defines how points are distributed
    *ggplot(mpg, aes(x = cyl, y = displ )) + geom_quasirandom( method = "smiley")

    ?ggbeeswarm::position_beeswarm
    *Can't be added to a plot like geom_beeswarm
    *scatters points, and specifies x or y
    *ggplot(mpg, aes(x = cyl, y = displ )) + geom_point(position = position_beeswarm())

    ?ggbeeswarm::position_quasirandom
    * Ability to have vars defined similarly as geom_quasirandom
    *ggplot(mpg, aes(x = cyl, y = displ )) + geom_point(position = position_quasirandom(method = "smiley"))


###*7.5.2.1*

  #1 
    *diamonds %>% 
    *count(color, cut) %>% 
    *group_by(cut) %>% mutate(pctMix = n/sum(n)) %>%  
    *ggplot(mapping = aes(x = color, y = cut)) +
    *geom_tile(mapping = aes(fill = pctMix))

  #2 
    *flights %>% 
    *group_by(month, dest) %>% summarise(avgDelay = mean(dep_delay, na.rm = TRUE)) %>% 
    *ggplot(aes(x = month, y = dest)) +
    *geom_tile(aes(fill = avgDelay))
    - some destinations didn't have flights lifted for some months
    - There are too many data points, making the data very granular
    - We could limit to only airports with more than a certain number of yearly flights

  #3
    *diamonds %>% 
    *count(color, cut) %>%  
    *ggplot(mapping = aes(x = color, y = cut)) + geom_tile(mapping = aes(fill = n))

    *diamonds %>% 
    *count(color, cut) %>%  
    *ggplot(mapping = aes(y = color, x = cut)) + geom_tile(mapping = aes(fill = n))

    - The information is the same but the rows and columns are switched (depends on user preference)

###*7.5.3.1* 

  #1
    *smaller <- diamonds %>% filter( carat < 3)
    - We need to be aware of carat values and define sensible widths for cut width
    - Widths should be smaller than max carats (3)
    
    cwid = .5
    *ggplot(smaller, aes(x = price, y = ..density..)) + geom_freqpoly(aes(group = cut_width(carat, cwid), color = cut_width(carat, cwid)), binwidth = 1000)
    - For cut_number, we should know # of 'bins' for our carats
    cnum = 10
    *ggplot(smaller, aes(x = price, y = ..density..)) + geom_freqpoly(aes(group = cut_number(carat, cnum), color = cut_number(carat, cnum)), binwidth = 1000)
  
  #2: See above
 
  #3 - smaller diamonds see a greater distribution around lower priced and larger diamonds see the opposite
 
  #4 - Use geom_tile to compare average prices vs. cut/carat
 
    *Break carat out using cut_width
      smaller %>% 
      group_by(cut, caratGroup = cut_width(carat, .5)) %>% 
      summarise(avgPrice = mean(price, na.rm = TRUE)) %>% 
      ggplot(aes(x = cut, y = caratGroup)) + geom_tile(aes(fill = avgPrice))
 
  #5 
   -  scatterplots show exact values as outliers
   -  bin coloring in bin plots based on frequency so if we have a bin with too many points, we are unable to see difference between some bins

